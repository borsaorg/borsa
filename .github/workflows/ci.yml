name: CI

on:
  push:
    branches: [ main ]
    paths-ignore: ['**/*.md']
  pull_request:
    branches: [ main ]
    paths-ignore: ['**/*.md']

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Lint and format check
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # Test individual crates
  test:
    needs: [lint]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        crate: [borsa, borsa-core, borsa-yfinance]
        rust: [stable]
        # Only test beta on ubuntu to reduce CI time
        include:
          - os: ubuntu-latest
            rust: beta
            crate: borsa

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Test crate
        shell: bash
        run: |
          cd ${{ matrix.crate }}          
          cargo test --verbose


  # Workspace validation and examples
  workspace-validation:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build workspace
        run: cargo build --workspace

      - name: Run mock examples
        shell: bash
        run: |
          set -euo pipefail
          for f in borsa/examples/[0-9][0-9]_*.rs; do \
            name=$(basename "$f" .rs); \
            echo "==> Running example: $name (mock)"; \
            BORSA_EXAMPLES_USE_MOCK=1 cargo run -p borsa --example "$name" || exit 1; \
          done

  # Documentation
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-docs

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --workspace --no-deps

      - name: Check documentation links
        run: cargo doc --workspace --no-deps --document-private-items

  # Note: Benchmark workflow moved to dedicated benchmark.yml
